#set($modelClassName = "${class1.className}")
###set($basePackage = "me.ely")
package ${basePackage}.service

import ${basePackage}.domain.entity.${className}
import ${basePackage}.domain.entity.${className}_
import ${basePackage}.domain.request.${modelClassName}
import ${basePackage}.repository.jpa.${className}Repository
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Sort
import org.springframework.stereotype.Service
import java.util.*
import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root
import kotlin.math.max

/**
 *
 *
 * @author  <a href="mailto:${email}">${user}</a>
 * @see
 * @since   ${date}
 */
@Service
class ${className}Service : AbstractJpaService<${className}, ${primaryKey}, ${className}Repository>() {

    fun search(requestModel: ${modelClassName}): Page<${className}> {
        val cb = entityManager.criteriaBuilder
        val dataCq = cb.createQuery(${className}::class.java)
        val dataRoot = dataCq.from(${className}::class.java)
        val dataPredicates = buildSearchPredicates(requestModel, cb, dataRoot)
        dataCq.where(*dataPredicates)
        dataCq.orderBy(cb.desc(dataRoot.get(${className}_.createDt)))
        val typedQuery = entityManager.createQuery(dataCq)
        typedQuery.firstResult = requestModel.pageSize * max(requestModel.pageIndex - 1, 0)
        typedQuery.maxResults = requestModel.pageSize
        val data = typedQuery.resultList

        val countCq = cb.createQuery(Long::class.java)
        val countRoot = countCq.from(${className}::class.java)
        val countPredicates = buildSearchPredicates(requestModel, cb, countRoot)
        countCq.select(cb.count(countRoot)).where(*countPredicates)
        val count = entityManager.createQuery(countCq).singleResult



        return PageImpl(data, PageRequest.of(max(requestModel.pageIndex - 1, 0), requestModel.pageSize, Sort(Sort.Direction.DESC, "id")), count)
    }

    private fun buildSearchPredicates(requestModel: ${modelClassName}, cb: CriteriaBuilder, dataRoot: Root<${className}>): Array<Predicate> {
        val conditions = ArrayList<Predicate>()
#foreach($field in $fields)
    #if($field.type == "String")
        if (!requestModel.${field.name}.isNullOrEmpty()) {
            conditions.add(cb.like(dataRoot.get(${className}_.${field.name}), "%" + requestModel.${field.name} + "%"))
        }
    #elseif ($field.name != "pageIndex" && $field.name != "pageSize")
        if (requestModel.${field.name} != null) {
            conditions.add(cb.eq(dataRoot.get(${className}_.${field.name}), requestModel.${field.name}))
        }
    #end
#end
        return conditions.toTypedArray()
    }
}