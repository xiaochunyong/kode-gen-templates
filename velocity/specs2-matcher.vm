#######################################################################################
##
## Common variables:
##  $YEAR - yyyy
##  $TIME - yyyy-MM-dd HH:mm:ss
##  $USER - user.name
##
## Available variables:
##  $class0 - the context class, alias: $class
##  $class1 - the selected class, like $class1, $class2
##  $ClassName - generated by the config of "Class Name", the generated class name
##
## Class Entry Structure:
##  $class0.className - the class Name
##  $class0.packageName - the packageName
##  $class0.importList - the list of imported classes name
##  $class0.fields - the list of the class fields
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class0.allFields - the list of the class fields include all fields of superclass
##          - type: the field type
##          - name: the field name
##          - modifier: the field modifier, like "private",or "@Setter private" if include annotations
##  $class0.methods - the list of class methods
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"
##  $class0.allMethods - the list of class methods include all methods of superclass
##          - name: the method name
##          - modifier: the method modifier, like "private static"
##          - returnType: the method returnType
##          - params: the method params, like "(String name)"#
########################################################################################
package $class.PackageName
#foreach($importer in $class.ImportList)
    #if($importer)
    import $importer
    #end
#end
import org.specs2.matcher.{AlwaysMatcher, Matcher, Matchers}

#set($typeParams = $utils.mkString($class.typeParams, ', ' , '[', ']'))

trait ${class.className}Matchers extends Matchers {
def a${class.className}With$typeParams(
#**##foreach($field in $class.Fields)
    ${field.Name}: Matcher[${field.Type}] = AlwaysMatcher()#if($velocityCount < $class0.Fields.size()),
    #**##end
#end
): Matcher[${class0.className}$typeParams] = {
#foreach($field in $class0.Fields)
    ${field.Name} ^^ ((_:${class0.className}$typeParams).${field.Name} aka "${class0.className}.${field.Name}")#if($velocityCount < $class0.Fields.size()) and
#**##end
#end
}
}

object ${class.className}Matchers extends ${class.className}Matchers
