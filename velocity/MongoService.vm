#set($modelClassName = "${class1.className}")
###set($basePackage = "me.ely")
package ${basePackage}.service

import ${basePackage}.domain.document.${className}
import ${basePackage}.domain.request.${className}SearchRequestModel
import ${basePackage}.repository.mongo.${className}Repository
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.PageRequest
import org.springframework.data.domain.Sort
import org.springframework.data.mongodb.core.query.Criteria
import org.springframework.data.mongodb.core.query.Query
import org.springframework.stereotype.Service

/**
 *
 * @author  <a href="mailto:${email}">${user}</a>
 * @see
 * @since   ${date}
 */
@Service
class ${className}Service : AbstractMongoService<${className}, ${primaryKey}, ${className}Repository>() {

    fun search(requestModel: ${modelClassName}): Page<${className}> {
        val query = buildSearchQuery(requestModel)
        val sort = Sort(Sort.Direction.DESC, ${className}::id.name)
        val pageableAndSort = PageRequest.of(requestModel.pageIndex, requestModel.pageSize, sort)
        val count = mongoTemplate.count(query, ${className}::class.java)
        val data = mongoTemplate.find(query.with(pageableAndSort), ${className}::class.java)
        return PageImpl(data, pageableAndSort, count)
    }

    private fun buildSearchQuery(requestModel: ${modelClassName}): Query {
        val query = Query()
#foreach($field in $fields)
    #if($field.type == "String")
        if (!requestModel.${field.name}.isNullOrEmpty()) {
            query.addCriteria(Criteria.where("${field.name}").regex(".*?" + requestModel.${field.name} + ".*"))
        }
    #elseif ($field.name != "pageIndex" && $field.name != "pageSize")
        if (requestModel.${field.name} != null) {
            query.addCriteria(Criteria.where("${field.name}").`is`(requestModel.${field.name}))
        }
    #end
#end
        return query
    }
}